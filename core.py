from matplotlib import pyplot
from matplotlib.patches import Circle
from shapely.geometry import Polygon, Point
from descartes.patch import PolygonPatch
import math

#from figures import SIZE

COLOR = {
    True:  '#6699cc',
    False: '#ff3333'
    }

SampleCellData = [
    ["Cell1", -3.68003, 42.36526, 150, 65, 15],
    ["Cell2", -3.689498889, 42.33775583, 150, 65, 15]
]

cells_g = {}

class Cell(object):
    def __init__(self, name, lat, long, azimuth, bw, radius):
        self.name = name
        self.lat  = lat
        self.long = long
        self.azimuth = azimuth
        self.bw = bw
        self.radius = radius
        self.geo = Geometry(self)

class Geometry(object):
    def __init__(self, cell):
        self.cell = cell
        cell.geo = self
        self.poly_lines = 16
        self.edgeL = 0.0
        self.edgeR = 0.0

    def getOriginLatLong(self):
        cellitems = list(cells_g)
        return (math.radians(cells_g[cellitems[0]].lat), math.radians(cells_g[cellitems[0]].long))

    def get_distance_from_origin(self):
        '''
        Using Haversine formula
        '''
        radius_of_earth = 6371
        latR = math.radians(self.cell.lat)
        lonR = math.radians(self.cell.long)
        originlatR, originlongR = self.getOriginLatLong()
        deltaLon = lonR - originlongR
        deltaLat = latR - originlatR
        a = math.sin(deltaLat/ 2) ** 2 + math.cos(originlatR) * math.cos(latR) * math.sin(deltaLon/2) ** 2
        c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))
        dist = radius_of_earth * c
        print "Computed Distance %d" %(dist)
        '''
        Reference
        http://www.movable-type.co.uk/scripts/latlong.html
        '''
        y = math.sin(deltaLon) * math.cos(latR)
        x = math.cos(originlatR) * math.sin(latR) - math.sin(originlatR) * math.cos(latR) * math.cos(deltaLon)
        brng = math.degrees(math.atan2(y, x)) % 360
        print "Computed bearing %d" %(brng)

        return dist,brng

    def get_coordinates(self):
        cellitems = list(cells_g)
        print cellitems[0]
        print "CellName %s, First Cell Name %s" %(self.cell.name, cellitems[0])
        if self.cell.name == cellitems[0]:
            print 0,0
            return 0,0
        else:
            dist,brng = self.get_distance_from_origin()
            rfx = math.radians((90-brng) % 360)
            return ( dist*math.cos(rfx), dist*math.sin(rfx))

    def get_cone_edges(self, azimuth, beamwidth):
        half_sector = float(beamwidth)/2
        left_edge = (azimuth-half_sector) % 360
        right_edge = (azimuth+half_sector) % 360
        return(left_edge, right_edge)

    def create_polygon(self):
        center = (self.x, self.y)
        polygon_vertex = [(self.x, self.y)]
        step = float(self.cell.bw)/self.poly_lines
        for i in range(self.poly_lines + 1):
            angle_from_x = (90 - (self.edgeL + step*i)) % 360
            xrad = math.radians(angle_from_x)
            polygon_vertex.append(((self.x + math.cos(xrad) * self.cell.radius),
                                      (self.y + math.sin(xrad) * self.cell.radius)))
        polygon1 = Polygon(polygon_vertex)
        self.polygon = polygon1
        for delta in (0, 0.01, -0.01):
            self.polygon = polygon1.union(Point(center).buffer(0.6 + delta))
            if self.polygon.is_valid:
                break;

    def generate_beam_form(self):
        self.x,self.y =  self.get_coordinates()
        print self.x,self.y
        self.edgeL, self.edgeR = self.get_cone_edges(self.cell.azimuth, self.cell.bw)
        self.create_polygon()
        print self.polygon

class Plotter:
    def __init__(self):
        self.fig = pyplot.figure(1,figsize=(40,5), dpi=90)
        self.xrange = [-15, 15]
        self.yrange = [-15, 15 ]
        self.polygons = []
        self.ext = [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0)]
        self.subplotter()

    def subplotter(self):
        self.ax = self.fig.add_subplot(121)
        self.ax.set_title('Cell Cone')
        self.ax.set_xlim(*(self.xrange))
        self.ax.set_xticks(range(*self.xrange) + [self.xrange[-1]])
        self.ax.set_ylim(*self.yrange)
        self.ax.set_yticks(range(*self.yrange) + [self.yrange[-1]])
        self.ax.set_aspect(1)

    def addtosubplot(self, polygon):
        x,y = polygon.xy
        self.ax.plot(x,y, 'o', color='#FF9999', zorder = 1)

    def plotCoords(self, vertexlist):
        #for polygon in self.polygons:
        #   self.addtosubplot(polygon.interiors)
        #self.addtosubplot(self.polygon.interiors[0])
        #self.addtosubplot(self.polygon.interiors[1])
        #self.addtosubplot(self.polygon.exterior)
        self.addtosubplot(vertexlist)

    def plotterColor(self, ob):
        return COLOR[ob.is_valid]

    def updateCellsToPlot(self):
        for key,cell in cells_g.items():
            #polygon = Polygon(self.ext, list(cell.geo.polygon.exterior.coords))
            #self.polygons.append(plot_vertex_list)
            self.plotCoords(cell.geo.polygon.exterior)
        #self.polygon = Polygon(self.ext, self.polygons)
        #self.plotCoords()
        #patch = PolygonPatch(self.polygon, facecolor=self.plotterColor(self.polygon), edgecolor=self.plotterColor(self.polygon), alpha=0.5, zorder=2)
        #self.ax.add_patch(patch)


    def display(self):
        pyplot.xlim(5,40)
        pyplot.show()



def readCellData():
    for data in SampleCellData:
        cells_g[str(data[0])]=Cell(data[0], data[1], data[2], data[3], data[4], data[5])
    for key,cell in cells_g.items():
        cell.geo.generate_beam_form()


if __name__ == "__main__":
    readCellData()
    plotter = Plotter()
    plotter.updateCellsToPlot()
    plotter.display()
#def v_color(ob):
#    return COLOR[ob.is_valid]
#
#def plot_coords(ax, ob):
#    x, y = ob.xy
#    ax.plot(x, y, 'o', color='#999999', zorder=1)
#
#fig = pyplot.figure(1, figsize=(40,5), dpi=90)
#
##4: invalid self-touching ring
#ax = fig.add_subplot(121)
##ext = [(0, 0), (0, 2), (2, 2), (2, 0), (0, 0)]
#ext = [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0)]
#
##int_1 = [(0.5, 0.25), (1.5, 0.25), (1.5, 1.25), (0.5, 1.25), (0.5, 0.25)]
#int_1 = [(-0.4561736698034031, -3.5638941626371885), (0.13469461143099526, -4.491371581667025), (0.030873877923948023, -4.552450418851272), (-0.07701309802830103, -4.606020648247831), (-0.18842415508233057, -4.651813064910687), (-0.3027994224304662, -4.68959754951434), (-0.41956413330357484, -4.719184224765887), (-0.5381315133301214, -4.740424409589972), (-0.6579057292366897, -4.753211366291546), (-0.7782848830719282, -4.757480836941769), (-0.8986640369071668, -4.753211366291546), (-1.0184382528137335, -4.740424409589972), (-1.1370056328402816, -4.719184224765887), (-1.25377034371339, -4.689597549514339), (-1.3681456110615242, -4.651813064910687), (-1.4795566681155554, -4.606020648247831), (-1.5874436440678044, -4.552450418851272), (-1.6912643775748517, -4.491371581667025), (-1.1003960963404529, -3.563894162637189), (-1.1116270228836882, -3.5571626043232976), (-1.1589208535701143, -3.5220871089594126), (-1.2025489517838555, -3.482544905653699), (-1.2420911550895695, -3.4389168074399574), (-1.2771666504534545, -3.3916229767535317), (-1.3074376416809406, -3.341118879037369), (-1.3326126025786995, -3.287890896360824), (-1.3524490845112531, -3.2324516432944477), (-1.3667560513138661, -3.175335030151447), (-1.375395719075246, -3.1170911211395067), (-1.3782848830719279, -3.05828083694177), (-1.3753957190752462, -2.9994705527440337), (-1.3667560513138661, -2.941226643732093), (-1.3524490845112533, -2.8841100305890923), (-1.3326126025787, -2.8286707775227162), (-1.307437641680941, -2.775442794846171), (-1.2771666504534551, -2.7249386971300082), (-1.2420911550895701, -2.6776448664435826), (-1.2025489517838566, -2.634016768229841), (-1.1589208535701154, -2.5944745649241274), (-1.1116270228836895, -2.559399069560243), (-1.0611229251675272, -2.5291280783327568), (-1.0078949424909827, -2.503953117434998), (-0.9524556894246063, -2.4841166355024447), (-0.8953390762816061, -2.4698096686998317), (-0.8370951672696657, -2.4611700009384516), (-0.7782848830719296, -2.4582808369417695), (-0.7194745988741934, -2.461170000938451), (-0.661230689862253, -2.4698096686998308), (-0.6041140767192527, -2.4841166355024438), (-0.5486748236528763, -2.5039531174349965), (-0.49544684097633174, -2.5291280783327554), (-0.44494274326016897, -2.5593990695602407), (-0.397648912573743, -2.594474564924125), (-0.35402081436000177, -2.6340167682298388), (-0.314478611054288, -2.6776448664435795), (-0.2794031156904028, -2.724938697130005), (-0.24913212446291677, -2.7754427948461675), (-0.2239571635651575, -2.828670777522712), (-0.20412068163260377, -2.884110030589088), (-0.18981371482999054, -2.941226643732088), (-0.18117404706861018, -2.9994705527440284), (-0.1782848830719279, -3.0582808369417647), (-0.1782848830719279, -3.0582808369417696), (-0.18117404706860973, -3.117091121139506), (-0.18981371482998965, -3.1753350301514462), (-0.20412068163260255, -3.232451643294447), (-0.22395716356515571, -3.2878908963608233), (-0.24913212446291477, -3.341118879037368), (-0.27940311569040055, -3.3916229767535304), (-0.31447861105428543, -3.4389168074399565), (-0.35402081435999905, -3.4825449056536977), (-0.39764891257374013, -3.5220871089594112), (-0.444942743260166, -3.5571626043232962), (-0.4561736698034031, -3.5638941626371885)]
#
##int_2 = [(0.5, 1.25), (1, 1.25), (1, 1.75), (0.5, 1.75)]
##int_2 = [(0.5319530853447391, -0.2769172486698119), (2.6610324995346657, -1.3852458397051008), (2.5562090989970363, -1.570285019416781), (2.4385400537748456, -1.7474330906034068), (2.30861668276524, -1.9157998361149366), (2.167091886179267, -2.0745391673468077), (2.014676864541055, -2.2228533760648777), (1.852137544712114, -2.3599971431058515), (1.6802907309009174, -2.4852812838084266), (1.5, -2.598076211353316), (1.3121713618776425, -2.6978151006079294), (1.117748706432308, -2.783996736576554), (0.917709060289661, -2.8561880331417724), (0.7130576769785192, -2.9140262094397844), (0.5048229852589774, -2.957220612932727), (0.29405142098868026, -2.9855541800165906), (0.08180216849855551, -2.998884526824755), (-0.1308581620960084, -2.9971446647455733), (-0.026140496351868808, -0.5987157997628224), (-0.058810284197735326, -0.5971108360033182), (-0.11705419320967587, -0.5884711682419385), (-0.1741708063526763, -0.5741642014393257), (-0.2296100594190527, -0.5543277195067725), (-0.28283804209559743, -0.5291527586090136), (-0.33334213981176025, -0.49888176738152784), (-0.38063597049818637, -0.4638062720176429), (-0.4242640687119277, -0.42426406871192934), (-0.46380627201764146, -0.3806359704981881), (-0.49888176738152656, -0.33334213981176214), (-0.5291527586090126, -0.28283804209559943), (-0.5543277195067717, -0.22961005941905466), (-0.5741642014393251, -0.17417080635267815), (-0.5884711682419381, -0.11705419320967768), (-0.597110836003318, -0.058810284197737026), (-0.6, -6.063858597689163e-16), (-0.5971108360033182, 0.05881028419773582), (-0.5884711682419383, 0.1170541932096765), (-0.5741642014393255, 0.17417080635267704), (-0.5543277195067722, 0.22961005941905352), (-0.5291527586090131, 0.2828380420955983), (-0.49888176738152723, 0.33334213981176114), (-0.46380627201764224, 0.38063597049818715), (-0.4242640687119286, 0.42426406871192845), (-0.38063597049818754, 0.46380627201764196), (-0.33334213981176175, 0.4988817673815268), (-0.28283804209559915, 0.5291527586090127), (-0.22961005941905469, 0.5543277195067717), (-0.17417080635267845, 0.574164201439325), (-0.11705419320967825, 0.588471168241938), (-0.05881028419773786, 0.5971108360033179), (-1.7089393673834872e-15, 0.6), (0.05881028419773446, 0.5971108360033183), (0.11705419320967488, 0.5884711682419387), (0.1741708063526752, 0.5741642014393259), (0.22961005941905152, 0.5543277195067731), (0.28283804209559615, 0.5291527586090142), (0.3333421398117589, 0.4988817673815288), (0.3806359704981849, 0.46380627201764413), (0.4242640687119261, 0.42426406871193084), (0.4638062720176399, 0.38063597049819003), (0.49888176738152507, 0.3333421398117644), (0.5291527586090111, 0.28283804209560204), (0.5543277195067704, 0.22961005941905765), (0.5741642014393241, 0.17417080635268156), (0.5884711682419373, 0.11705419320968141), (0.5971108360033177, 0.05881028419774108), (0.6, 4.9431210822783584e-15), (0.6, 0.0), (0.5971108360033182, -0.058810284197736304), (0.5884711682419382, -0.11705419320967685), (0.5741642014393253, -0.17417080635267726), (0.5543277195067722, -0.22961005941905363), (0.5319530853447391, -0.2769172486698119)]
#int_2 = [(0.531953085344739, -0.27691724866981193), (13.305162497673328, -6.926229198525505), (12.78104549498518, -7.851425097083905), (12.192700268874226, -8.737165453017035), (11.543083413826201, -9.578999180574684), (10.835459430896336, -10.372695836734037), (10.073384322705275, -11.114266880324388), (9.26068772356057, -11.799985715529258), (8.401453654504587, -12.426406419042133), (7.5, -12.990381056766578), (6.560856809388213, -13.489075503039647), (5.588743532161539, -13.91998368288277), (4.588545301448305, -14.280940165708863), (3.5652883848925963, -14.570131047198922), (2.5241149262948865, -14.786103064663635), (1.4702571049434014, -14.927770900082955), (0.4090108424927775, -14.994422634123776), (-0.654290810480042, -14.985723323727868), (-0.026140496351868808, -0.5987157997628224), (-0.058810284197735326, -0.5971108360033182), (-0.11705419320967587, -0.5884711682419385), (-0.1741708063526763, -0.5741642014393257), (-0.2296100594190527, -0.5543277195067725), (-0.28283804209559743, -0.5291527586090136), (-0.33334213981176025, -0.49888176738152784), (-0.38063597049818637, -0.4638062720176429), (-0.4242640687119277, -0.42426406871192934), (-0.46380627201764146, -0.3806359704981881), (-0.49888176738152656, -0.33334213981176214), (-0.5291527586090126, -0.28283804209559943), (-0.5543277195067717, -0.22961005941905466), (-0.5741642014393251, -0.17417080635267815), (-0.5884711682419381, -0.11705419320967768), (-0.597110836003318, -0.058810284197737026), (-0.6, -6.063858597689163e-16), (-0.5971108360033182, 0.05881028419773582), (-0.5884711682419383, 0.1170541932096765), (-0.5741642014393255, 0.17417080635267704), (-0.5543277195067722, 0.22961005941905352), (-0.5291527586090131, 0.2828380420955983), (-0.49888176738152723, 0.33334213981176114), (-0.46380627201764224, 0.38063597049818715), (-0.4242640687119286, 0.42426406871192845), (-0.38063597049818754, 0.46380627201764196), (-0.33334213981176175, 0.4988817673815268), (-0.28283804209559915, 0.5291527586090127), (-0.22961005941905469, 0.5543277195067717), (-0.17417080635267845, 0.574164201439325), (-0.11705419320967825, 0.588471168241938), (-0.05881028419773786, 0.5971108360033179), (-1.7089393673834872e-15, 0.6), (0.05881028419773446, 0.5971108360033183), (0.11705419320967488, 0.5884711682419387), (0.1741708063526752, 0.5741642014393259), (0.22961005941905152, 0.5543277195067731), (0.28283804209559615, 0.5291527586090142), (0.3333421398117589, 0.4988817673815288), (0.3806359704981849, 0.46380627201764413), (0.4242640687119261, 0.42426406871193084), (0.4638062720176399, 0.38063597049819003), (0.49888176738152507, 0.3333421398117644), (0.5291527586090111, 0.28283804209560204), (0.5543277195067704, 0.22961005941905765), (0.5741642014393241, 0.17417080635268156), (0.5884711682419373, 0.11705419320968141), (0.5971108360033177, 0.05881028419774108), (0.6, 4.9431210822783584e-15), (0.6, 0.0), (0.5971108360033182, -0.058810284197736304), (0.5884711682419382, -0.11705419320967685), (0.5741642014393253, -0.17417080635267726), (0.5543277195067722, -0.22961005941905363), (0.531953085344739, -0.27691724866981193)]
#polygon = Polygon(ext, [int_1, int_2])
#
#
#plot_coords(ax, polygon.interiors[0])
#plot_coords(ax, polygon.interiors[1])
#plot_coords(ax, polygon.exterior)
#
#patch = PolygonPatch(polygon, facecolor=v_color(polygon), edgecolor=v_color(polygon), alpha=0.5, zorder=2)
#ax.add_patch(patch)
#
#ax.set_title('Test Intersection')
#
#xrange = [-15, 15]
#yrange = [-15, 15]
#ax.set_xlim(*xrange)
#ax.set_xticks(range(*xrange) + [xrange[-1]])
#ax.set_ylim(*yrange)
#ax.set_yticks(range(*yrange) + [yrange[-1]])
#ax.set_aspect(1)
#
#pyplot.xlim(5, 40)
#pyplot.show()
#
